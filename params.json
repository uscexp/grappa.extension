{"name":"grappa.extension","tagline":"AST interpreter extension for parboiled/grappa parser.","body":"# grappa.extension\r\n\r\n## Introduction\r\nAST interpreter extension for [parboiled](https://github.com/sirthias/parboiled)/[grappa](https://github.com/parboiled1/grappa) parser.\r\n\r\n## News\r\n21.Aug.2014: New release [v0.2.0-Beta](https://github.com/uscexp/grappa.extension/releases/tag/v0.2.0-Beta) which adds an AST commands java source code generator.\r\n\r\n15.Aug.2014: First release [v0.1.0-Beta](https://github.com/uscexp/grappa.extension/releases/tag/v0.1.0-Beta) which adds the AST interpreter.\r\n\r\n## Features\r\n* AST java source code generator for the AST command tree node classes.\r\n* AST interpreter creates an AST (Abstract Syntax Tree) structure.\r\n* The interpreter iterates over the AST structure and executes the implemented logic.\r\n\r\n## Description\r\nThe `AstInterpreter` interpretes a PEG defined language based on a [grappa](https://github.com/parboiled1/grappa) `BaseParser`.\r\nFirst it creates an AST (Abstract Syntax Tree) based on the [grappa](https://github.com/parboiled1/grappa) `ParsingResult` and\r\nthe annotated parser methods, annotated with `@AstValue` or `@AstCommand`.\r\n`@AstValue` writes the parse node value to the interpreter stack. By default the interpreter stores the values as in the parser defined type, if one wants to change that, one has to define the corresponding parameters of the `@AstValue` annotation.\r\n`@AstCommand` must be implemented from a developer, which has to create the `Ast<Name>TreeNode` and implement it. This represents the logic of your language commands. The `AstCommandTreeNode` classes by default are located in the same package as the parser implementation and have the naming convetion of Ast + name of your parser rule (first char upper case) + TreeNode and must extend `AstCommandTreeNode`. If one want to change that, one has to define the corresponding parameters of the `@AstCommand` annotation.\r\n\r\nThe `AstModelGenerator` creates the model classes from a [grappa](https://github.com/parboiled1/grappa) `BaseParser` extended and annotated parser class. It creates the corresponding java source files for the `@AstCommand` annotated rules in the parser class. The generated classes will extend `AstCommandTreeNode` and the to be implemented method `interpret`.\r\n\r\n\r\n## Example\r\n```java\r\n...\r\nString input = \"2 * 2 + 2 * 3\";\r\nCalculatorParser calculatorParser = Parboiled.createParser(CalculatorParser.class);\r\n\r\nRecoveringParseRunner<CalculatorParser> recoveringParseRunner = new RecoveringParseRunner<>(calculatorParser.inputLine());\r\n\r\nParsingResult<CalculatorParser> parsingResult = recoveringParseRunner.run(input);\r\n\r\nNode<CalculatorParser> root = parsingResult.parseTreeRoot;\r\nAstInterpreter<Double> interpreter = new AstInterpreter<>();\r\nLong id = new Date().getTime();\r\ninterpreter.execute(calculatorParser.getClass(), parsingResult, id);\r\ninterpreter.cleanUp(id);\r\n...\r\n```\r\nFirst it creates an instance of `CalculatorParser` with the grappa factory method. Then one need a `ParseRunner` and run it with the input string. This gives us the `ParsingResult` which we need for the parse tree root. Up to now we have only treated with the [parboiled](https://github.com/sirthias/parboiled)/[grappa](https://github.com/parboiled1/grappa) parser.\r\nNow to the point. We create an `AstInterpreter` and call the `execute` method with the parameters calculation parser class, parsing result and an id. This will create the AST structure and interpret it.\r\nFinally clean up the interpreter (remove process store like stack ...).\r\n\r\nFor the java source code model generation use: `java -cp <dependencies> com.github.uscexp.grappa.extension.codegenerator.AstModelGenerator pasrserClass sourceOutputPath`.\r\ne.g. `java -cp grappa.jar;asm-debug-all.jar;guava.jar;codemodel.jar;grappa.extension.jar;MyParserLib.jar; com.github.uscexp.grappa.extension.codegenerator.AstModelGenerator com.github.uscexp.grappa.parcer.CalculatorParser src/main/java`\r\n\r\n## Installation\r\nTo use the library in your java project just put the binary jar file to your classpath.\r\nThe maven dependency can be found here: [mvnrepository](http://mvnrepository.com/artifact/com.github.uscexp/grappa.extension)\r\n\r\n(C) 2014 by haui","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}